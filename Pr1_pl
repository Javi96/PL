(1) Enumeración de las clases léxicas del lenguaje. Para cada clase debe incluirse, además,
una descripción informal, en lenguaje natural.

MAS: operador de suma
MENOS: operador de resta
MULT: operador de multiplicación
DIV: operador de división

AND: operador lógico AND
OR: operador lógico OR
NOT: operador lógico NOT

MENOR_TH: operador menor que
MAYOR_TH: operador mayor que
MENOR_EQ: operador menor o igual que
MAYOR_EQ: operador mayor o igual que
IGUAL: operador igual a
DISTINTO: operador distinto de

P_APPE: paréntesis de apertura

P_CIER: paréntesis de cierre

NUM: número real que puede tener parte exponencial
BOOL: tipo lógico que puede ser true o false

SEP_ENTRADA: símbolo && que sirve para separar declaraciones de expresiones

FIN_LINEA: símbolo ; para indicar el fin de línea

VARIABLE: conjunto de letras digitos y _ que sirve para identificar una variable

TRUE: true
FALSE: false

LETRA_EXP: 

	#preguntar
	MAS_UNARIO: operador unario positivo
	MENOS_UNARIO: operador unario negativo


(2) Una especificación formal del léxico del lenguaje mediante definiciones regulares.

MAS: +
MENOS: -
MULT: *
DIV: /

AND: and
OR: or
NOT: not

MENOR_TH: <
MAYOR_TH: >
MENOR_EQ: <=
MAYOR_EQ: >=
IGUAL: ==
DISTINTO: !=

P_APPE: (

P_CIER: )

NUM: num
BOOL: bool

SEP_ENTRADA: &&

FIN_LINEA: ;

VARIABLE: LETRA, (LETRA | DIGITO | _)*
	LETRA: [a-z, A-Z]
	DIGITO: [0-9]

TRUE: true
FALSE: false

LETRA_EXP: (e | E)


VALOR: SIGNO?, DIGITO, DIGITO*, DECIMAL?, EXP?
	DECIMAL: \., DIGITO, DIGITO*
	EXP: (e | E), SIGNO?, DIGITO, DIGITO*

//----------------------------------------------------------------------------------

PROGRAMA: DECLARACIONES, SEP_ENTRADA, INSTRUCCIONES

	DECLARACIONES: DECLARACION, (FIN_LINEA, DECLARACION)*

		DECLARACION: TIPO, VARIABLE

			TIPO: [num, bool]

	SEP_ENTRADA: [&&]

	FIN_LINEA: [;]

	INSTRUCCIONES: INSTRUCCION, (FIN_LINEA, INSTRUCCION)*

		INSTRUCCION: VARIABLE, =, EXPRESIONES

			VARIABLE: LETRA, (LETRA | DIGITO | _)*

				LETRA: [a-z, A-Z]

				DIGITO: [0-9]

			EXPRESIONES: (P_APPE, EXPRESIONES, P_CIER, (OPERADOR, P_APPE, EXPRESIONES, P_CIER)*) | EXPRESION //aqui preguntar

				EXPRESION: (NUM | VARIABLE | BOOLEAN), (OPERADOR, (NUM | VARIABLE | BOOLEAN))*

					NUM: SIGNO?, DIGITO, DIGITO*, DECIMAL?, EXP?

						SIGNO: [\+, \-]

						DECIMAL: \., DIGITO, DIGITO*

						EXP: (e | E), SIGNO?, DIGITO, DIGITO*

					BOOLEAN: [true, false]

					OPERADOR: ARIT_BIN | LOGICO | RELACIONALES

						ARIT_BIN: [\+, \-, \*, /]

						LOGICO: [and, or, not]

						RELACIONALES: [\<, \>, \<=, \>=, \==, \!=]

				P_APPE: [\(]

				P_CIER: [\)]


(3) Diseño de un analizador léxico para el lenguaje mediante un diagrama de transiciones
